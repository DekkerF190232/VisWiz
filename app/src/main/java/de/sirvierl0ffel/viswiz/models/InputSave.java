package de.sirvierl0ffel.viswiz.models;

public class InputSave {

    //public static final Map<Algorithm, List<InputSave>> DUMMY = new HashMap<>();
    //
    //public static void init() {
    //    Algorithm.DUMMY.forEach(a -> DUMMY.put(a, Stream.of(
    //            a.defaultInput,
    //                    new InputSave("// out of memory\nlet A = [73,37,51,18,67,16,81,8,33,32,42,81,87,13,7,50,58,50,90,88,97,74,50,24,89,33,81,85,76,60,49,49,2,5,70,43,0,60,74,12,50,86,28,38,34,14,56,63,53,39,46,33,3,37,38,3,10,72,79,69,97,71,40,57,26,35,45,91,97,0,94,82,67,31,95,65,99,1,18,98,19,17,92,20,15,50,28,92,42,66,69,79,68,36,82,3,81,35,6,99,3,6,24,51,60,13,79,62,78,46,95,88,40,41,2,50,22,21,95,59,73,21,41,97,48,25,52,91,73,1,84,85,89,38,21,22,16,56,10,26,24,94,51,12,69,18,85,83,92,59,62,79,29,18,85,42,48,8,94,45,3,88,12,37,39,46,40,59,97,41,40,30,21,20,68,82,72,39,5,90,96,24,53,20,84,91,91,57,97,37,67,78,62,83,0,94,36,60,53,18,99,77,56,2,5,33,31,34,45,78,80,90,66,96,58,25,96,86,93,20,74,62,86,98,44,20,66,50,20,96,2,14,65,10,74,78,25,37,62,71,15,17,87,82,54,33,63,51,46,7,51,7,94,98,79,19,34,78,42,9,56,82,89,25,31,10,96,59,39,81,73,84,82,72,88,79,0,62,88,31,34,36,31,14,64,63,55,73,78,32,10,17,85,22,57,41,20,9,98,29,11,78,42,13,86,69,44,45,85,29,43,17,9,16,17,88,8,83,69,66,14,21,96,32,76,45,88,32,72,14,48,25,80,47,38,87,78,55,3,8,22,30,87,31,21,42,2,47,66,63,40,53,98,6,33,85,81,3,88,58,35,85,22,7,89,87,21,45,33,34,61,18,46,51,19,50,97,26,80,78,14,3,76,79,51,51,36,74,52,14,17,75,28,73,77,32,29,88,44,1,58,69,86,49,53,88,10,38,79,18,23,52,83,20,1,34,54,66,94,32,17,76,48,20,93,35,2,16,87,86,46,91,82,11,85,68,5,19,76,80,85,79,53,80,98,94,79,99,37,63,30,23,76,72,11,20,81,60,7,39,42,32,43,22,99,20,4,96,86,98,89,65,28,74,84,50,1,63,97,68,77,63,36,85,19,93,13,50,57,14,50,26,29,23,6,32,17,32,53,89,84,14,71,91,54,13,78,75,71,6,43,53,68,63,12,51,79,23,13,36,86,61,87,40,78,17,5,67,10,92,25,71,42,37,35,48,96,4,77,95,72,52,35,30,10,51,61,65,99,51,89,79,24,89,53,25,26,74,71,25,30,92,33,87,8,70,77,89,66,5,82,51,0,72,23,96,27,86,94,5,26,39,52,36,41,80,49,21,75,25,39,25,69,79,24,85,40,22,71,39,73,90,47,13,90,1,85,41,31,89,16,29,95,23,83,95,70,28,40,11,41,45,11,35,48,46,22,54,17,39,27,41,19,33,99,58,14,45,6,96,75,1,12,19,66,1,88,6,7,81,56,30,57,74,73,34,69,4,51,34,18,69,40,75,11,14,35,80,59,62,73,9,64,14,6,44,89,98,71,59,3,41,25,17,65,30,65,75,13,11,32,82,36,38,51,56,45,55,49,16,38,57,81,72,88,60,6,75,6,90,40,55,77,23,70,58,83,75,56,17,83,72,52,4,77,41,21,82,59,25,56,73,1,38,38,29,31,38,7,66,70,25,15,53,28,55,94,54,82,68,83,47,20,88,84,0,27,6,97,89,74,99,62,73,98,14,36,72,51,83,30,3,79,39,26,86,6,25,60,5,79,44,10,88,26,65,34,45,20,88,52,36,6,20,86,42,48,59,10,87,81,35,35,85,56,95,71,63,60,45,56,54,41,81,2,37,39,15,6,82,23,21,28,95,73,31,3,88,96,39,11,55,99,23,97,49,34,48,87,13,91,51,23,57,61,85,34,4,32,16,6,38,95,79,26,95,68,8,18,97,78,58,75,44,96,82,95,13,11,82,70,17,9,10,48,90,13,54,99,65,27,72,40,23,14,77,93,20,17,26,94,3,61,1,48,86,85,83,44,31,85,42,71,36,7,91,34,97,83,43,29,6,66,85,58,39,54,89,46,86,34,20,77,6,0,74,77,74,38,71,21,33,34,83,50,64,32,48,27,51,68,8,40,68,62,19,19,37,20,8,70,63,37,45,62,22,61,66,32,83,25,59,52,2,88,1,3,53,14,6,70,55,72,21,47,90,3,41,16,86,64,11,69,72,97,85,48,75,65,99,10,96,91,18,19,1,32,38,46,76]"),
    //                    new InputSave("// 6503 steps\nlet A = [73,68,62,19,19,37,20,8,70,63,37,45,62,22,61,66,32,83,25,59,52,2,88,1,3,53,14,6,70,55,72,21,47,90,3,41,16,86,64,11,69,72,97,85,48,75,65,99,10,96,91,18,19,1,32,38,46,76]")
    //            )
    //            .collect(Collectors.toCollection(ArrayList::new))));
    //}

    public String input;

    public InputSave(String input) {
        this.input = input;
    }

    public String getInput() {
        return input;
    }

    public void setInput(String input) {
        this.input = input;
    }

    public InputSave() {
    }
}
